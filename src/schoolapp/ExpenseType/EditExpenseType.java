/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolapp.ExpenseType;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import schoolapp.utilities.Utility;

/**
 *
 * @author prohit
 */
public class EditExpenseType extends javax.swing.JFrame {
    
    private Vector<Object> comboItems;
    private final int EXPENSE_TYPE = 1;
    private final int EXPENSE_CATEGORY = 1;
    private Connection connect;
    private PreparedStatement preparedStatement;
    private Connection connection;
    private Statement stmt;
    private ResultSet rs;

    /**
     * Creates new form EditExpense
     */
    public EditExpenseType() {
        initComponents();
        Utility.updateFrameTitle(this);
        
        fillComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        expenseTypeCombo = new javax.swing.JComboBox();
        updateBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        newExpenseText = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Edit Expense Type");

        jLabel3.setText("Expense Type");

        expenseTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Expense Type Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newExpenseText)
                            .addComponent(expenseTypeCombo, 0, 134, Short.MAX_VALUE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expenseTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(newExpenseText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(updateBtn)
                .addGap(150, 150, 150))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        if (expenseTypeCombo.getSelectedIndex() == -1) {
            Utility.showError(this, "No expense type selected");
            return;
        }
        try {
            connect = Utility.getConnection();
            // Statements allow to issue SQL queries to the database
            String sqlStmt = "update expense_type set expense_category=? where expense_category='" + expenseTypeCombo.getSelectedItem().toString() + "';";
            // PreparedStatements can use variables and are more efficient
            preparedStatement = connect.prepareStatement(sqlStmt);
            preparedStatement.setString(EXPENSE_CATEGORY, newExpenseText.getText());
            // "myuser, webpage, datum, summery, COMMENTS from feedback.comments");
            // Parameters start with 1
            Object[] options = {"Yes", "No"};
            int n = JOptionPane.showOptionDialog(this, "Do you like to update the expense category  " + expenseTypeCombo.getSelectedItem().toString() + " ?", "Remove Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options);
            if (n == JOptionPane.YES_OPTION) {
                
                int affectedRows = preparedStatement.executeUpdate();
                if (affectedRows > 0) {
                    Utility.showSuccess(this, "Updated the Expense type!");
                    clearForm();
                    fillComboBox();
                } else {
                    Utility.showError(this, "Nothing was Updated. Please check the expense type.");
                }
            }
            
        } catch (SQLException | ClassNotFoundException ex) {
            Utility.showError(this, ex.toString());
        }
        Utility.closeStatement(this, preparedStatement, connect);
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox expenseTypeCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField newExpenseText;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables

    private void clearForm() {
        newExpenseText.setText("");
    }
    
    private void fillComboBox() {
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        String sql = "SELECT * FROM expense_type ;";

        // Java SE 7 has try-with-resources
        // This will ensure that the sql objects are closed when the program 
        // is finished with them
        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i));
            }
            
            comboItems = new Vector<Object>();
            //  Get row data
            while (rs.next()) {
                comboItems.add(rs.getString(EXPENSE_TYPE));
                
            }
            
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        expenseTypeCombo.setModel(model);
    }
}
