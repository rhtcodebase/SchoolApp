/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolapp.SMS;

import schoolapp.report.*;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.HttpURLConnection;
import java.net.URLEncoder;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import schoolapp.utilities.PrintUtilities;
import schoolapp.utilities.Template;
import schoolapp.utilities.Utility;
import schoolapp.utilities.XMLParser;

/**
 *
 * @author prohit
 */
public class SMSService extends javax.swing.JFrame {

    private Vector<Object> comboItems;
    private HashMap<String, Integer> courseHash;
    private int COURSE_NAME = 2;
    private int COURSE_ID = 1;
    private int BATCH_ID = 1;
    private int BATCH_NAME = 2;
    private HashMap<String, ArrayList> batchHash;
    private Connection connection;
    private Statement stmt;
    private ResultSet searchResult;
    private ResultSet rs;
    private ArrayList<Integer> batchArray;
    private DefaultListModel<String> listModel = new DefaultListModel<String>();
    private DefaultListModel<String> templateListModel ;
    private ArrayList<Template> templates;

    private int PHONE_NUMBER = 1;
    private String tempID;

    /**
     * Creates new form ViewBatchWiseReport
     */
    public SMSService() {
        initComponents();
        Utility.updateFrameTitle(this);
      
//        loadFeeCategories();

        courseNameCombo.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                loadBatches();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        courseNameCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        batchNameCombo = new javax.swing.JComboBox();
        addBatchBtn = new javax.swing.JButton();
        totalAmount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messagePane = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedBatches = new javax.swing.JList();
        removeBatchBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        templateList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sendBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        smsLogPane = new javax.swing.JTextArea();
        populateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SMS");

        jLabel2.setText("Course");

        jLabel3.setText("Batch");

        addBatchBtn.setText("Add");
        addBatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBatchBtnActionPerformed(evt);
            }
        });

        totalAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalAmount.setForeground(java.awt.Color.red);

        jScrollPane1.setViewportView(messagePane);

        jScrollPane2.setViewportView(selectedBatches);

        removeBatchBtn.setText("Remove");
        removeBatchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBatchBtnActionPerformed(evt);
            }
        });

        templateList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                templateListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(templateList);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Message Templates");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Logs");

        jLabel4.setText("Selected Batches");

        sendBtn.setText("Send SMS");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("*Replace contents inside ( ) with your content.");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Message*");

        smsLogPane.setColumns(20);
        smsLogPane.setRows(5);
        jScrollPane5.setViewportView(smsLogPane);

        populateBtn.setText("Populate");
        populateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 45, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(courseNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(121, 121, 121))
                                            .addComponent(addBatchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(batchNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(38, 38, 38)
                                                .addComponent(removeBatchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(populateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))))))))
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(sendBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(courseNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addBatchBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(batchNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removeBatchBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(populateBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(sendBtn))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBatchBtnActionPerformed
        int index = batchNameCombo.getSelectedIndex();
        int batchId = batchArray.get(index);
        //batchArray.get(index);
        String listItem = batchId + "_" + courseNameCombo.getSelectedItem().toString() + "_" + batchNameCombo.getSelectedItem().toString();
        for (int i = 0; i < listModel.size(); i++) {
            if (listModel.get(i).contains(listItem)) {
                Utility.showError(this, listItem + " already added!");
                return;
            }
        }
        listModel.addElement(listItem);
        selectedBatches.setModel(listModel);


    }//GEN-LAST:event_addBatchBtnActionPerformed

    private void removeBatchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBatchBtnActionPerformed
        int itemToBeRemoved = selectedBatches.getSelectedIndex();
        if (itemToBeRemoved == -1) {
            Utility.showError(this, "Please select a batch.");
        } else {
            listModel.remove(itemToBeRemoved);
            selectedBatches.setModel(listModel);
        }
    }//GEN-LAST:event_removeBatchBtnActionPerformed

    private void templateListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_templateListValueChanged
        int selectedIndex = templateList.getSelectedIndex();
        messagePane.setText(templates.get(selectedIndex).getDescription());
        tempID = templates.get(selectedIndex).getTemplateId();
    }//GEN-LAST:event_templateListValueChanged

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        ArrayList<String> batchIdList = new ArrayList<>();

        int modelsize = selectedBatches.getModel().getSize();
        String batchId;

        if (modelsize == 0) {
            Utility.showError(this, "No batches found. Please add batches.");
            return;
        } else if (messagePane.getText() == null || messagePane.getText().equals("")) {
            Utility.showError(this, "No template selected. Please select a message template to send SMS.");
            return;
        }
        for (int i = 0; i < modelsize; i++) {
            batchId = selectedBatches.getModel().getElementAt(i).toString().split("_")[0];
            batchIdList.add(batchId);
        }
        smsLogPane.setText("");
        StringBuilder sqlQuery = new StringBuilder("SELECT mobile_phone FROM `guardians` AS G, `students` AS S WHERE S.parent_id=G.id"
                + " AND G.mobile_phone<>\"\" AND S.is_active=1 AND S.is_deleted=0 "
                + " AND (");

        for (int i = 0; i < batchIdList.size(); i++) {
            sqlQuery.append("S.batch_id=" + batchIdList.get(i));
            if (i != batchIdList.size() - 1) {
                sqlQuery.append(" OR ");
            } else {
                sqlQuery.append(");");
            }
        }
        ArrayList<String> phoneNumberList = queryPhoneNumbers(sqlQuery);
        Object[] options = {"Yes", "No"};
        int n = JOptionPane.showOptionDialog(this, "Are you sure you want to send this message?" , "Send Message Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options);
        if (n == JOptionPane.YES_OPTION) {

            try {
                sendSMS(phoneNumberList);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(SMSService.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_sendBtnActionPerformed

    private void populateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populateBtnActionPerformed
        loadCourses();
        loadBatches();
        loadTemplates();
    }//GEN-LAST:event_populateBtnActionPerformed

    /**
         * @param args the command line arguments
         */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SMSService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SMSService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SMSService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SMSService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SMSService().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBatchBtn;
    private javax.swing.JComboBox batchNameCombo;
    private javax.swing.JComboBox courseNameCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JEditorPane messagePane;
    private javax.swing.JButton populateBtn;
    private javax.swing.JButton removeBatchBtn;
    private javax.swing.JList selectedBatches;
    private javax.swing.JButton sendBtn;
    private javax.swing.JTextArea smsLogPane;
    private javax.swing.JList templateList;
    private javax.swing.JLabel totalAmount;
    // End of variables declaration//GEN-END:variables

    private void loadCourses() {
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        String sql = "SELECT C.id,C.course_name "
                + "FROM courses as C";

        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i));
            }

            comboItems = new Vector<Object>();
            courseHash = new HashMap<>();
            while (rs.next()) {
                String courseName = rs.getString(COURSE_NAME);
                Integer courseId = rs.getInt(COURSE_ID);
                comboItems.add(courseName);
                courseHash.put(courseName, courseId);

            }

        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        courseNameCombo.setModel(model);

    }

    private void loadBatches() {
        String courseName = courseNameCombo.getSelectedItem().toString();
        Integer courseId = 0;
        String sql = null;
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        if (!courseName.toLowerCase().equals("all")) {
            courseId = courseHash.get(courseName);
            sql = "SELECT B.id,B.name "
                    + "FROM batches as B "
                    + "WHERE B.course_id=" + courseId;
        } else {
            sql = "SELECT B.id,B.name "
                    + "FROM batches as B";
        }

        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();

            comboItems = new Vector<Object>();
            batchHash = new HashMap<>();
            batchArray = new ArrayList<Integer>();

            while (rs.next()) {
                String batchName = rs.getString(BATCH_NAME);
                Integer batchId = rs.getInt(BATCH_ID);
                batchArray.add(batchId);
                if (batchHash.get(batchName) == null) {
                    batchHash.put(batchName, new ArrayList());
                }
                batchHash.get(batchName).add(batchId);
                if (!comboItems.contains(batchName)) {
                    comboItems.add(batchName);
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        batchNameCombo.setModel(model);

    }

    private void loadTemplates() {
        XMLParser xmlParser = new XMLParser();
        templates = xmlParser.parseXML();
        templateListModel = new DefaultListModel<String>();
        for (Template template : templates) {
            templateListModel.addElement(template.getShortForm());

        }
        templateList.setModel(templateListModel);

    }

    private ArrayList<String> queryPhoneNumbers(StringBuilder sqlQuery) {
        ArrayList<String> phoneNumbers = new ArrayList<String>();

        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sqlQuery.toString());
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();

            while (rs.next()) {
                String phoneNumber = rs.getString(PHONE_NUMBER);
                if (phoneNumber != null && !phoneNumber.equalsIgnoreCase("")) {
                    phoneNumbers.add(phoneNumber);
                }

            }
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        return phoneNumbers;
    }

    private void sendSMS(ArrayList<String> phoneNumberList) throws UnsupportedEncodingException {
        String uid = URLEncoder.encode(Utility.SMS_UID, "UTF-8");
        String pin = URLEncoder.encode(Utility.SMS_PIN, "UTF-8");
        String route = URLEncoder.encode(Utility.SMS_ROUTE, "UTF-8");
        String sender = URLEncoder.encode(Utility.SMS_SENDER, "UTF-8");
        String tempId = URLEncoder.encode(tempID, "UTF-8");
        String message = URLEncoder.encode(messagePane.getText().trim(), "UTF-8");

        // System.out.println(phoneNumberList);
        if (phoneNumberList.size() == 0) {
            Utility.showError(this, "No contacts found to send SMS.");
        } else {
            String staticPart = "uid=" + uid + "&pin=" + pin
                    + "&route=" + route + "&sender=" + sender
                    + "&tempid=" + tempId + "&message=" + message;
            String dynamicPart = "&mobile=" + phoneNumberList.get(0);
            String completeUrl = staticPart + dynamicPart;
            StringBuilder phoneNos;

            if (!trySendingSMS(completeUrl)) {
                return;
            }

            // So there's no error here and we can proceed to send the SMS for rest 
            // of the numbers
            // Slicing the phoneno list in terms of 100 number buckets
            int loopCounter = 1;
            int noOfPhoneNumbers = phoneNumberList.size();
            staticPart = staticPart + "&pushid=1&mobile=";

            for (int i = 1; i <= (noOfPhoneNumbers / 100); i++) {

                phoneNos = new StringBuilder();
                for (int j = loopCounter; j < (i * 100); j++) {
                    phoneNos.append(phoneNumberList.get(j));
                    if (j != ((i * 100) - 1)) {
                        phoneNos.append(",");
                    }
                    loopCounter++;

                }
                completeUrl = staticPart + phoneNos;
                if (!trySendingSMS(completeUrl)) {
                    return;
                }
            }

            phoneNos = new StringBuilder();
            

            // Residual numbers
            for (int i = loopCounter; i < noOfPhoneNumbers; i++) {
                phoneNos.append(phoneNumberList.get(i));
                if (i != noOfPhoneNumbers - 1) {
                    phoneNos.append(",");
                }

                loopCounter++;

            }
            if (!phoneNos.toString().equals("")) {
                completeUrl = staticPart + phoneNos;
                if (!trySendingSMS(completeUrl)) {
                    return;
                }
            }
            Utility.showSuccess(this, "Message Sent successfully. Please check the delivery report to confirm.");
        }
    }

    // HTTP POST request
    private void sendPost(String urlParameters) throws Exception {
        URL obj = new URL(Utility.SMS_URL);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        //add reuqest header
        con.setRequestMethod("POST");
        con.setRequestProperty("User-Agent", Utility.USER_AGENT);
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        // Send post request
        con.setDoOutput(true);
        DataOutputStream wr = new DataOutputStream(con.getOutputStream());
        wr.writeBytes(urlParameters);
        wr.flush();
        wr.close();

        int responseCode = con.getResponseCode();

        smsLogPane.append("\nSending 'POST' request to URL : " + Utility.SMS_URL);
        smsLogPane.append("\nPost parameters : " + urlParameters);
        smsLogPane.append("\nResponse Code : " + responseCode);

        BufferedReader in = new BufferedReader(
                new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }

        in.close();

        //print result
        if (response.toString()
                .contains("Template Not Matching")) {
            throw new Exception("Sorry, Couldn't send the SMS. Templates are not "
                    + "matching. Make sure the message is strictly as per the"
                    + " selected template.");
        }

    }

    private Boolean trySendingSMS(String completeUrl) {
        try {
            sendPost(completeUrl);
        } catch (Exception ex) {
            Utility.showError(this, ex.getMessage());
            return false;
        }
        return true;
    }

}
