/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolapp.report;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import schoolapp.utilities.Utility;

/**
 *
 * @author prohit
 */
public class ViewIncome extends javax.swing.JFrame {

    private Vector<Object> comboItems;
    private Connection connection;
    private Statement stmt;
    private ResultSet rs;
    private ResultSet searchResult;

    /**
     * Creates new form ViewExpense
     */
    public ViewIncome() {
        initComponents();
   //     Utility.updateFrameTitle(this);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        startDate = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        endDate = new com.toedter.calendar.JDateChooser();
        viewBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        feeCategoryCombo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        totalAmount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        expenseTable = new javax.swing.JTable();
        loadBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Income Report");

        jLabel2.setText("Start Date");

        jLabel3.setText("End date");

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Fee Category");

        feeCategoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feeCategoryComboActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Total (Rs.)");

        totalAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalAmount.setForeground(java.awt.Color.red);
        totalAmount.setText("0.0");

        expenseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "DESCRIPTION", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        expenseTable.setEnabled(false);
        expenseTable.setFocusable(false);
        expenseTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(expenseTable);

        loadBtn.setText("Populate");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(50, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(feeCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3)))
                                .addGap(16, 16, 16)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(loadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(29, 29, 29)
                .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(209, 209, 209))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feeCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn)
                    .addComponent(loadBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalAmount)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        if (startDate.getDate() == null || endDate.getDate() == null) {
            Utility.showError(this, "Select the start and end dates!");
            return;
        }
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        //String searchSql = "SELECT * FROM expense where date>='" + new java.sql.Date(startDate.getDate().getTime()) + "' and date<='" + new java.sql.Date(endDate.getDate().getTime()) + "' and name = '" + jExpenseTypeCombo.getSelectedItem().toString() + "';";
        //String sumSql= "SELECT sum(amount) FROM expense where date>='" + new java.sql.Date(startDate.getDate().getTime()) + "' and date<='" + new java.sql.Date(endDate.getDate().getTime()) + "' and name = '" + jExpenseTypeCombo.getSelectedItem().toString() + "';";
        String searchSql = "SELECT F.id  AS FEE_COLLECTION_ID,P.name AS FEE_CATEGORY,P.description AS DESCRIPTION, SUM( fees_paid ) AS Total "
                + "FROM finance_fees AS F, finance_fee_collections AS C, finance_fee_categories AS P "
                + "WHERE F.fee_collection_id = C.id AND C.fee_category_id = P.id AND P.name ='" + feeCategoryCombo.getSelectedItem().toString() + "' AND "
                + "date>='" + new java.sql.Date(startDate.getDate().getTime()) + "' and date<='" + new java.sql.Date(endDate.getDate().getTime()) + "' "
                + "GROUP BY fee_collection_id ;";

        if (feeCategoryCombo.getSelectedItem().toString().equalsIgnoreCase("all")) {
            searchSql = "SELECT F.id  AS FEE_COLLECTION_ID,P.name AS FEE_CATEGORY,P.description AS DESCRIPTION , SUM( fees_paid ) AS Total "
                    + "FROM finance_fees AS F, finance_fee_collections AS C, finance_fee_categories AS P "
                    + "WHERE F.fee_collection_id = C.id AND C.fee_category_id = P.id AND "
                    + "date>='" + new java.sql.Date(startDate.getDate().getTime()) + "' and date<='" + new java.sql.Date(endDate.getDate().getTime()) + "' "
                    + "GROUP BY fee_collection_id ;";
        }

        // Java SE 7 has try-with-resources
        // This will ensure that the sql objects are closed when the program 
        // is finished with them
        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            searchResult = stmt.executeQuery(searchSql);
            ResultSetMetaData md = (ResultSetMetaData) searchResult.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i).toUpperCase());
            }

            boolean empty = true;
            //  Get row data
            int TOTAL_AMOUNT = 4;
            double total = 0.0;
            while (searchResult.next()) {
                empty = false;
                Vector<Object> row = new Vector<Object>(columns);
                total = total + searchResult.getDouble(TOTAL_AMOUNT);
                for (int i = 1; i <= columns; i++) {
                    row.addElement(searchResult.getObject(i));
                }

                data.add(row);
            }

            if (empty) {
                Utility.showError(this, "No record found with the given search criteria");
                totalAmount.setText("0.0");

            }

            totalAmount.setText(Double.toString(total));

        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }

        Utility.closeConnections(this, connection, stmt, searchResult);
        DefaultTableModel model = new DefaultTableModel(data, columnNames);

        expenseTable.setModel(model);
    }//GEN-LAST:event_viewBtnActionPerformed

    private void feeCategoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feeCategoryComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_feeCategoryComboActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        loadFeeCategoryBtn();
    }//GEN-LAST:event_loadBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JTable expenseTable;
    private javax.swing.JComboBox feeCategoryCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBtn;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JLabel totalAmount;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    private void loadFeeCategoryBtn() {
    Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        String sql = "SELECT C.name "
                + "FROM finance_fee_categories AS C GROUP BY C.name";

        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i));
            }

            comboItems = new Vector<Object>();
            //  Get row data
            int FEE_COLLECTION_NAME = 1;
            while (rs.next()) {

                comboItems.add(rs.getString(FEE_COLLECTION_NAME));

            }
            comboItems.add("ALL");

        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        feeCategoryCombo.setModel(model);

    }
}
