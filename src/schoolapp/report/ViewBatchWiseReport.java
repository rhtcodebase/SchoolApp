/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schoolapp.report;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.ResultSetMetaData;
import com.mysql.jdbc.Statement;
import com.sun.org.apache.xalan.internal.xsltc.runtime.BasisLibrary;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.print.PrinterException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import schoolapp.utilities.PrintUtilities;
import schoolapp.utilities.Utility;

/**
 *
 * @author prohit
 */
public class ViewBatchWiseReport extends javax.swing.JFrame {

    private Vector<Object> comboItems;
    private HashMap<String, Integer> courseHash;
    private int COURSE_NAME = 2;
    private int COURSE_ID = 1;
    private int BATCH_ID = 1;
    private int BATCH_NAME = 2;
    private HashMap<String, ArrayList> batchHash;
    private Connection connection;
    private Statement stmt;
    private ResultSet searchResult;
    private ResultSet rs;

    /**
     * Creates new form ViewBatchWiseReport
     */
    public ViewBatchWiseReport() {
        initComponents();
     //   Utility.updateFrameTitle(this);
        
        
        courseNameCombo.addItemListener(new ItemListener() {
            
            @Override
            public void itemStateChanged(ItemEvent e) {
                loadBatches();
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        courseNameCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        batchNameCombo = new javax.swing.JComboBox();
        viewBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        totalAmount = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        feeCategoryCombo = new javax.swing.JComboBox();
        loadBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Batch Wise Report");

        jLabel2.setText("Course");

        jLabel3.setText("Batch");

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "DESCRIPTION", "TOTAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportTable.setEnabled(false);
        jScrollPane1.setViewportView(reportTable);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Total (Rs.)");

        totalAmount.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalAmount.setForeground(java.awt.Color.red);

        jLabel5.setText("Category");

        loadBtn.setText("Populate");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(feeCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 46, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(batchNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(courseNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(batchNameCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(feeCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewBtn)
                    .addComponent(loadBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        String searchSql = "SELECT F.id  AS FEE_COLLECTION_ID,P.name AS FEE_CATEGORY,P.description AS DESCRIPTION , SUM( fees_paid ) AS Total "
                + "FROM finance_fees AS F, finance_fee_collections AS C, finance_fee_categories AS P "
                + "WHERE F.fee_collection_id = C.id AND C.fee_category_id = P.id AND "+loadBatchIds() + " AND P.name ='" + feeCategoryCombo.getSelectedItem().toString() + "'"
                + " GROUP BY F.fee_collection_id ;";
        if (feeCategoryCombo.getSelectedItem().toString().equalsIgnoreCase("all")) {
            searchSql = "SELECT F.id  AS FEE_COLLECTION_ID,P.name AS FEE_CATEGORY,P.description AS DESCRIPTION , SUM( fees_paid ) AS Total "
                    + "FROM finance_fees AS F, finance_fee_collections AS C, finance_fee_categories AS P "
                    + "WHERE F.fee_collection_id = C.id AND C.fee_category_id = P.id AND " +loadBatchIds()  
                    + " GROUP BY F.fee_collection_id ;";
        }
        
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            searchResult = stmt.executeQuery(searchSql);
            ResultSetMetaData md = (ResultSetMetaData) searchResult.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i).toUpperCase());
            }
            
            boolean empty = true;
            //  Get row data
            int TOTAL_AMOUNT = 4;
            double total = 0.0;
            while (searchResult.next()) {
                empty = false;
                Vector<Object> row = new Vector<Object>(columns);
                total = total + searchResult.getDouble(TOTAL_AMOUNT);
                for (int i = 1; i <= columns; i++) {
                    row.addElement(searchResult.getObject(i));
                }
                
                data.add(row);
            }
            
            if (empty) {
                Utility.showError(this, "No record found with the given search criteria");
                totalAmount.setText("0.0");
                
            }
            
            totalAmount.setText(Double.toString(total));
            
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, searchResult);
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        
        reportTable.setModel(model);
    }//GEN-LAST:event_viewBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        loadCourses();
        loadBatches();
        loadFeeCategories();
    }//GEN-LAST:event_loadBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBatchWiseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBatchWiseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBatchWiseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBatchWiseReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewBatchWiseReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox batchNameCombo;
    private javax.swing.JComboBox courseNameCombo;
    private javax.swing.JComboBox feeCategoryCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBtn;
    private javax.swing.JTable reportTable;
    private javax.swing.JLabel totalAmount;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    private void loadCourses() {
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        String sql = "SELECT C.id,C.course_name "
                + "FROM courses as C";        
        
        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i));
            }
            
            comboItems = new Vector<Object>();
            courseHash = new HashMap<>();
            while (rs.next()) {
                String courseName = rs.getString(COURSE_NAME);
                Integer courseId = rs.getInt(COURSE_ID);
                comboItems.add(courseName);
                courseHash.put(courseName, courseId);
                
            }
            comboItems.add("ALL");
            
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        courseNameCombo.setModel(model);
        
    }
    
    private void loadBatches() {
        String courseName = courseNameCombo.getSelectedItem().toString();
        Integer courseId=0;
        String sql=null;
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

       
        
        if(!courseName.toLowerCase().equals("all")){
            courseId=courseHash.get(courseName);
            sql = "SELECT B.id,B.name "
                + "FROM batches as B "
                + "WHERE B.course_id=" + courseId;
        }
        else{
            sql = "SELECT B.id,B.name "
                + "FROM batches as B";
        }
        
        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();
            
            comboItems = new Vector<Object>();
            batchHash = new HashMap<>();
            while (rs.next()) {
                String batchName = rs.getString(BATCH_NAME);
                Integer batchId = rs.getInt(BATCH_ID);
                if(batchHash.get(batchName)==null){
                    batchHash.put(batchName, new ArrayList());
                }
                batchHash.get(batchName).add(batchId);
                if(!comboItems.contains(batchName)){
                    comboItems.add(batchName);
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        batchNameCombo.setModel(model);
        
    }
    
    private void loadFeeCategories() {
        
        Vector<Object> columnNames = new Vector<Object>();
        Vector<Object> data = new Vector<Object>();
        //  Connect to an MySQL Database, run query, get result set

        String sql = "SELECT C.name "
                + "FROM finance_fee_categories AS C GROUP BY C.name";        
        
        try {
            connection = Utility.getConnection();
            stmt = (Statement) connection.createStatement();
            rs = stmt.executeQuery(sql);
            ResultSetMetaData md = (ResultSetMetaData) rs.getMetaData();
            int columns = md.getColumnCount();

            //  Get column names
            for (int i = 1; i <= columns; i++) {
                columnNames.add(md.getColumnName(i));
            }
            
            comboItems = new Vector<Object>();
            //  Get row data
            int FEE_COLLECTION_NAME = 1;
            while (rs.next()) {
                
                comboItems.add(rs.getString(FEE_COLLECTION_NAME));
                
            }
            comboItems.add("ALL");
            
        } catch (SQLException | ClassNotFoundException e) {
            Utility.showError(this, e.toString());
        }
        Utility.closeConnections(this, connection, stmt, rs);
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboItems);
        feeCategoryCombo.setModel(model);
        
    }

    private String loadBatchIds() {
        StringBuilder batchIds=new StringBuilder();
        ArrayList<Integer> batchIdList=batchHash.get(batchNameCombo.getSelectedItem().toString());
        batchIds.append("(");
        for (int i=0;i<batchIdList.size();i++) {
             batchIds.append(" P.batch_id="+batchIdList.get(i)+" ");
             if(i!=batchIdList.size()-1){
                 batchIds.append("OR");
             }
        }
       batchIds.append(")");
     
       return batchIds.toString();
    }
}
